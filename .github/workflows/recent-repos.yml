name: Update Recent Repositories
on:
  # Run when the main workflow runs to keep it in sync
  workflow_run:
    workflows: ["Metrics"]
    types:
      - completed
  # Also allow manual triggering for testing
  workflow_dispatch:
  # Run on schedule to check for new commits in repos
  schedule:
    - cron: '0 2 * * *' # Run daily at 2 AM
  # Also run when the workflow file itself is updated
  push:
    paths:
      - '.github/workflows/recent-repos.yml'

jobs:
  update-recent-repos:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Fetch recent repositories
        id: recent-repos
        run: |
          python3 -c "
          import json
          import requests
          from datetime import datetime, timezone, timedelta
          import os
          import sys
          
          try:
              # Get recent repositories sorted by last updated
              headers = {
                  'Authorization': f'token {os.environ[\"GITHUB_TOKEN\"]}',
                  'Accept': 'application/vnd.github.v3+json'
              }
              response = requests.get('https://api.github.com/user/repos?sort=updated&per_page=20&affiliation=owner', headers=headers)
              response.raise_for_status()
              repos = response.json()
              
              # Filter repos - only include those updated in last 6 months and exclude archived
              cutoff_date = datetime.now(timezone.utc) - timedelta(days=180)
              filtered_repos = []
              
              for repo in repos:
                  updated_at = datetime.fromisoformat(repo['updated_at'].replace('Z', '+00:00'))
                  
                  # Skip archived repositories and very old ones
                  if repo.get('archived', False) or updated_at < cutoff_date:
                      continue
                      
                  # Skip repositories that are just forks (unless they have recent activity)
                  if repo.get('fork', False):
                      # Only include forks if they have been updated recently (within 30 days)
                      recent_cutoff = datetime.now(timezone.utc) - timedelta(days=30)
                      if updated_at < recent_cutoff:
                          continue
                  
                  filtered_repos.append(repo)
                  if len(filtered_repos) >= 8:
                      break
              
              # Generate markdown for recent repositories section
              with open('recent_repos.md', 'w') as f:
                  f.write('## 📚 Recent Repositories\n\n')
                  
                  if not filtered_repos:
                      f.write('*No recently active repositories found.*\n')
                  else:
                      for repo in filtered_repos:
                          name = repo['name']
                          private = repo['private']
                          updated_at = datetime.fromisoformat(repo['updated_at'].replace('Z', '+00:00'))
                          html_url = repo['html_url']
                          description = repo.get('description', '') or ''
                          
                          # Format the date
                          formatted_date = updated_at.strftime('%b %d, %Y')
                          
                          # Add appropriate icons
                          if private:
                              privacy_icon = '🔒 '
                          else:
                              privacy_icon = ''
                          
                          # Add fork indicator if applicable
                          if repo.get('fork', False):
                              fork_icon = '🍴 '
                          else:
                              fork_icon = ''
                          
                          # Use a default description if none provided
                          if not description:
                              description = 'No description provided'
                          
                          # Truncate description if too long
                          if len(description) > 80:
                              description = description[:80] + '...'
                          
                          f.write(f'- {privacy_icon}{fork_icon}**[{name}]({html_url})** - {description} *(Updated: {formatted_date})*\n')
              
              with open('recent_repos.md', 'r') as f:
                  content = f.read()
                  print(content)
                  if not filtered_repos:
                      print('No repositories to display')
                      
          except Exception as e:
              print(f'Error fetching repositories: {e}')
              # Create a fallback section
              with open('recent_repos.md', 'w') as f:
                  f.write('## 📚 Recent Repositories\n\n')
                  f.write('*Unable to fetch recent repositories at this time.*\n')
              sys.exit(1)
          "
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update README with recent repositories
        run: |
          python3 -c "
          import re
          
          # Read current README
          with open('README.md', 'r') as f:
              content = f.read()
          
          # Read the new recent repos section
          with open('recent_repos.md', 'r') as f:
              recent_repos = f.read().strip()
          
          # Pattern to match existing recent repositories section
          pattern = r'## 📚 Recent Repositories.*?(?=\n## |\n<|\nfigure|\Z)'
          
          if re.search(pattern, content, re.DOTALL):
              # Replace existing section
              content = re.sub(pattern, recent_repos, content, flags=re.DOTALL)
          else:
              # Add new section before the metrics/embedded content
              # Look for wakatime figure or metrics image
              insert_patterns = [
                  r'(<figure><embed src=\"https://wakatime\.com)',
                  r'(!\[Metrics\])',
                  r'(<svg)',
                  r'(<!-- ### Hi there)'
              ]
              
              inserted = False
              for pattern in insert_patterns:
                  if re.search(pattern, content):
                      content = re.sub(pattern, f'{recent_repos}\n\n\\1', content, 1)
                      inserted = True
                      break
              
              if not inserted:
                  # Fallback: add at the end before any comments
                  content = content.rstrip() + '\n\n' + recent_repos + '\n'
          
          # Write updated README
          with open('README.md', 'w') as f:
              f.write(content)
          
          print('README updated successfully')
          "

      - name: Commit changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Check if there are any changes
          if git diff --quiet README.md; then
            echo "No changes to commit"
            exit 0
          fi
          
          git add README.md
          git commit -m "🚀 Update recent repositories section [skip ci]"
          
          # Try to push with retry logic
          for i in {1..3}; do
            if git push; then
              echo "Successfully pushed changes"
              break
            elif [ $i -eq 3 ]; then
              echo "Failed to push after 3 attempts"
              exit 1
            else
              echo "Push failed, retrying in 10 seconds..."
              sleep 10
              git pull --rebase origin $(git branch --show-current)
            fi
          done